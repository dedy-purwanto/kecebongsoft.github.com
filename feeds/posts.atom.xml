<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dedi Purwanto</title><link href="http://kecebongsoft.com/" rel="alternate"></link><link href="http://kecebongsoft.com/feeds/posts.atom.xml" rel="self"></link><id>http://kecebongsoft.com/</id><updated>2012-11-17T00:00:00+01:00</updated><entry><title>Managing SSH keys</title><link href="http://kecebongsoft.com/2012/11/managing-ssh-keys.html" rel="alternate"></link><updated>2012-11-17T00:00:00+01:00</updated><author><name>Dedi Purwanto</name></author><id>tag:kecebongsoft.com,2012-11-17:2012/11/managing-ssh-keys.html</id><summary type="html">&lt;p&gt;All this time, I've been managing my own SSH keys pretty badly, at least that's how I see it. I have different SSH key for different machine, some with passphrase, others without. &lt;/p&gt;
&lt;p&gt;Whether this is good or not, I believe it remains debatable. Having different SSH keys per machine will make you somehow safe in terms of not having to pass around your private key and storing it in place like Dropbox, you also don't really have to set a passphrase since the possibility of somebody remotely steal your private keys is highly unlikely. But in many ways I think it's inconvenient, in my case, I have to add those new keys to places like Github and Bitbucket everytime I generate them. They will stack up together in time, say in six months, I can't really remember which keys I'm still using, some might be dead already, Especially if you work on sandboxes like Vagrant &amp;amp; VirtualBox for development.&lt;/p&gt;
&lt;p&gt;Well, today I decided to remove all those keys, generate a new &lt;em&gt;global&lt;/em&gt; SSH key, set a very strong passphrase, and store it in my cloud storage (hint: it's not dropbox). It's really not that complex, the additional part is just putting it in a cloud storage, hell, you can even put it in a password-protected archive if you're super paranoid.&lt;/p&gt;
&lt;p&gt;One thing I learned was that you can freely change the user and hostname in your public key in case you don't like it, or in case the host name is too specific / ugly.&lt;/p&gt;
&lt;p&gt;But there are risks, for example, if I can't access my cloud storage, or if somebody else have access to it. In that case, there are few things I can do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Put a very strong passphrase on the private key, if they have access to your private key, nothing they can do with it.&lt;/li&gt;
&lt;li&gt;Set a very strong password, and multiple-level authentication system on the cloud storage if provided.&lt;/li&gt;
&lt;li&gt;Put the SSH public and private keys in a password-protected archive.&lt;/li&gt;
&lt;li&gt;If shit already happened, delete the public key immediately from places like code hostings, and then delete it from servers since they might not be so popular to get noticed compared to Github, for example.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So from today onwards, there shouldn't be any problem with managing SSH keys, or I can safely say I don't have to do it anymore. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update: When using shared private key like this, you'll have to run &lt;code&gt;ssh-add&lt;/code&gt; after you add the private key in a another machine, if you've set a passphrase, it will ask you for it, enter it and you should be good to go&lt;/em&gt;&lt;/p&gt;</summary></entry><entry><title>My new Pelican build mechanics</title><link href="http://kecebongsoft.com/2012/11/my-new-pelican-build-mechanics.html" rel="alternate"></link><updated>2012-11-17T00:00:00+01:00</updated><author><name>Dedi Purwanto</name></author><id>tag:kecebongsoft.com,2012-11-17:2012/11/my-new-pelican-build-mechanics.html</id><summary type="html">&lt;p&gt;As you know, my blog is powered by a python static blog engine, named Pelican. I really like it in many ways: simplicity, &lt;em&gt;geekyness&lt;/em&gt;, and hostings. Yes, hostings, this blog is hosted with the help of Github user pages, enabling you to create a static website through repository, and accessible with your Github username, plus you don't have to think about reliability and scaling, Github will handle it for you.&lt;/p&gt;
&lt;p&gt;Pelican, as a static blog engine, of course will generate static html files that you will have to push to your repository, these auto-generated files are pretty much meaningless, you don't want to 'manage' them, but it has to stay in the repo to serve request, and above that, it has to be placed in the root path of the repository. Meanwhile we also have some other files such as static files, the blog sources (posts, config file, build script, custom themes, etc), and in my case, I also have submodules repository which is a separate static site, they are mostly HTML5 slides.&lt;/p&gt;
&lt;p&gt;For me, I always wanted to keep everything clean, whenever I trigger a new build, I wanted to wipe all recent build files first. But I can't just do that with all other necessary files as mentioned, so few things need to be done before I trigger a build:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exclude all git submodules path from deletion.&lt;/li&gt;
&lt;li&gt;Exclude files that are not part of pelican auto-generated files.&lt;/li&gt;
&lt;li&gt;Wipe the rest.&lt;/li&gt;
&lt;li&gt;Trigger the build.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the last one is pretty much straightforward, the first three are quite tricky, but I finally figured it out with a bash script, note that I'm not a bash hacker, you might find my build script an eyesore, well, here it is:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="nv"&gt;GITMODULES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;grep path ../.gitmodules | sed &lt;span class="s1"&gt;&amp;#39;s/path = /\\\|/g&amp;#39;&lt;/span&gt; | sed &lt;span class="s1"&gt;&amp;#39;s/ //g&amp;#39;&lt;/span&gt; | sed &lt;span class="s1"&gt;&amp;#39;s/\t//g&amp;#39;&lt;/span&gt; | tr &lt;span class="s1"&gt;&amp;#39;\\n&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; | sed &lt;span class="s1"&gt;&amp;#39;s/#//g&amp;#39;&lt;/span&gt; | sed &lt;span class="s1"&gt;&amp;#39;s/^\\\|//g&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;FILES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;README\|pelican\|CNAME\|static&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;EXCEPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$GITMODULES&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\|&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$FILES&lt;/span&gt;
ls ../ | grep -v &lt;span class="nv"&gt;$EXCEPTIONS&lt;/span&gt; | xargs -i rm -rf ../&lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="nb"&gt;source &lt;/span&gt;env/bin/activate
pelican . -o ../ -s pelican.conf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First I grab all the submodules path and combine them together with a '\|' separator for regex purpose later, and manually list out all other excluded files with the same regex separator, and then use an inverse grep to delete the others. In my case, the manual list is really static and not always changed, so it will be safe to keep it this way, as for submodules, I have to make it dynamic to reduce the coupling.&lt;/p&gt;</summary></entry><entry><title>Optimizing I/O cost with provisioned IOPS</title><link href="http://kecebongsoft.com/2012/11/optimizing-io-cost-with-provisioned-iops.html" rel="alternate"></link><updated>2012-11-10T00:00:00+01:00</updated><author><name>Dedi Purwanto</name></author><id>tag:kecebongsoft.com,2012-11-10:2012/11/optimizing-io-cost-with-provisioned-iops.html</id><summary type="html">&lt;p&gt;Recently I've been watching my monthly AWS bill and notice the I/O cost has been increased in the last few months. Note that at this point I've been receiving something around 220 million I/O request on my EBS volume. Earlier this week, Amazon Singapore did an introductory workshop nearby our office and introduces provisioned IOPS. I didn't really paid any attention to it, but it turned out really handy.&lt;/p&gt;
&lt;p&gt;IOPS, or IO per second, is a term coined by AWS to allow some resource in EBS volume in order to serve I/O requests, the more you have it, the more you can serve a request in a second. In AWS, there are two flavors of EBS, standard or provisioned, from the latter you will be able to set how many IOPS you want to have in a month, which is called as IOPS-month. 1 IOPS-month is equal to the number of seconds in a month, which is approximately 27 million second, or 27 million IOPS. When looking at my monthly I/O requests, which was 220 million, I can safely provision my IOPS to 100 IOPS which is something around 270 million IOPS per month, a bit higher and also safer in case of sudden peak.&lt;/p&gt;
&lt;p&gt;When using a standard I/O request, you will be charged something around 11 cents per 1 million request, and when using provisioned IOPS, you will be charged 11 cents per 1 IOPS-month, this will approximately save $10 a month for I/O requests. Pricing will depends on region, and provisioned storage will cost more for space, but the end cost is cheaper.&lt;/p&gt;
&lt;p&gt;So far, the only way to use this provisioned IOPS is by creating a new instance / launching new EBS volume, I haven't figured any way to switch my EBS volume to use a provisioned IOPS. For more info, see the EBS detail page in AWS (http://aws.amazon.com/ebs/).&lt;/p&gt;</summary><category term="AWS"></category></entry><entry><title>T-shirt New Relic</title><link href="http://kecebongsoft.com/2012/09/t-shirt-new-relic.html" rel="alternate"></link><updated>2012-09-28T00:00:00+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:kecebongsoft.com,2012-09-28:2012/09/t-shirt-new-relic.html</id><summary type="html">&lt;p&gt;4 Minggu yang lalu New Relic ada promosi bagi setiap user baru yang ngedeploy, bakal dapet t-shirt "Data Nerd" gratis, syaratnya, harus register via Geekli.st. Karna saya udah punya account New Relic sebelum ini, jadi harus register account terpisah buat ngedapetin t-shirt nya, maruk yah :p. Anyway t-shirtnya udah datang:&lt;/p&gt;
&lt;p&gt;&lt;img src='/images/newrelic1.jpg' /&gt;
&lt;img src='/images/newrelic2.jpg' /&gt;
&lt;img src='/images/newrelic3.jpg' /&gt;
&lt;img src='/images/newrelic4.jpg' /&gt;
&lt;img src='/images/newrelic5.jpg' /&gt;&lt;/p&gt;</summary></entry><entry><title>72Solarized Theme</title><link href="http://kecebongsoft.com/2012/09/72solarized-theme.html" rel="alternate"></link><updated>2012-09-20T00:00:00+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:kecebongsoft.com,2012-09-20:2012/09/72solarized-theme.html</id><summary type="html">&lt;p&gt;For the past few hours I've been trying to modify the default &lt;em&gt;notmyidea&lt;/em&gt;
theme that came from pelican to be more look alike my 
&lt;a href='http://kecebongsoft.tumblr.com'&gt;Tumblr blog&lt;/a&gt;. Why? Because
I love solarized, and simplicity.&lt;/p&gt;
&lt;p&gt;Why 72? I am planning to make this blog to use fixed with font with 72 
columns. Which will make it extremelly easy to read, and suits my &lt;em&gt;brief&lt;/em&gt;
blogging style.&lt;/p&gt;
&lt;p&gt;It turned out it wasn't that easy, especially I am a complete idiot in
web design. So this is all that was. I will try to improve as more posts
will be here. But at least it got the simplicity already.&lt;/p&gt;</summary></entry><entry><title>puppet-sentry</title><link href="http://kecebongsoft.com/2012/08/puppet-sentry.html" rel="alternate"></link><updated>2012-08-08T00:00:00+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:kecebongsoft.com,2012-08-08:2012/08/puppet-sentry.html</id><summary type="html">&lt;p&gt;When I'm tasked to cast a new installation of sentry with puppet, I was
faced with problem that sentry need to interactively ask a superuser
creation when &lt;em&gt;syncdb&lt;/em&gt; is performed, which came from Django's. Fortunately.
in Django you can have initial predefined data that will be imported
when &lt;em&gt;syncdb&lt;/em&gt; is performed. By having a json formatted file in the root
project path and passing &lt;em&gt;--no-input&lt;/em&gt; in the command, Django will 
import the data and find the superuser information in the file.&lt;/p&gt;
&lt;p&gt;To make it easier for people, I created a puppet module to install 
sentry without having to interactively enter superuser information. 
Check it here: &lt;a href='http://github.com/kecebongsoft/puppet-sentry'&gt;
kecebongsoft/puppet-sentry&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Pemrograman Visual</title><link href="http://kecebongsoft.com/2012/08/pemrograman-visual.html" rel="alternate"></link><updated>2012-08-05T00:00:00+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:kecebongsoft.com,2012-08-05:2012/08/pemrograman-visual.html</id><summary type="html">&lt;p&gt;Beberapa bulan lalu saya sering cerita via chat ama temen tentang tugas
kuliahnya di kampus *tiiiit*, beberapa kali dia mention  tentang tugas
mata kuliah Pemrograman Visual, setelah saya intip, cukup kaget karena
materinya tidak sesuai dengan judul mata kuliahnya. Kalau kalian lagi
ambil mata kuliah Pemrograman Visual dan diajarin VB atau Java, selamat,
kalian tersesat.&lt;/p&gt;
&lt;p&gt;Belakangan ini saya mulai terusik lagi dengan judul mata kuliah Pemrograman Visual. 
Sekarang saya pengen bahasa singkat aja (karna kalau diulas semua sumpah panjang 
banget) tentang salahnya dimana dan apa yang membedakan antara 
Pemrograman Visual dan yang bukan.&lt;/p&gt;
&lt;p&gt;Permasalahan utamanya adalah: Mata kuliah dengan judul Pemrograman 
Visual, tapi dengan materi bahasa pemrograman seperti Visual Basic dan
Java, digabungkan dengan software seperti Microsoft Visual Studio,
Eclipse dan NetBeans.&lt;/p&gt;
&lt;h2&gt;Bahasa-bahasa tersebut bukanlah bahasa pemrograman visual&lt;/h2&gt;
&lt;p&gt;Dalam desain bahasa pemrograman, ada satu bagian tentang studi semantik,
yaitu proses penterjemahan sebuah valid statement dari bahasa pemrograman 
menjadi sebuah computational model, ini terdiri dari banyak sekali parameter, 
salah satunya adalah struktur sintatik, dan dimensi. &lt;/p&gt;
&lt;p&gt;Jumlah dimensi inilah yang menentukan bahwa bahasa-bahasa seperti VB dan
teman-temannya adalah bukan bahasa pemrograman visual, melainkan &lt;em&gt;textual
programming language&lt;/em&gt;. Apa saja dimensi textual programming language?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dimensi horizontal, adalah semantic sebagai legal linear string, yang
  membentuk sebuah statement menjadi computational model&lt;/li&gt;
&lt;li&gt;Dimensi vertikal, adalah line continuation, baris ke 2 di kode
  biasanya diartikan sebagai baris selanjutnya setelah baris pertama, atau
  jalankan baris kedua setelah baris pertama&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dimensi vertikal meskipun salah satu bagian utama, tapi bukan bagian dari
semantik melainkan spatial relationship, atau flow/blok selanjutnya setelah
blok pertama (baris pertama).&lt;/p&gt;
&lt;h2&gt;Apa itu Pemrograman Visual?&lt;/h2&gt;
&lt;p&gt;VPL adalah bahasa pemrograman yang menggunakan banyak dimensi yang
visually expresive sebagai semantiknya. Expresi Visual bukan berarti
tombol-tombol di Microsoft Visual Basic untuk bikin textbox atau picture
box, tapi simbol-simbol yang menjelaskan tentang alur program, hubungan
antar entity, dan impact.&lt;/p&gt;
&lt;p&gt;Didalam VPL, saya bisa secara visual mendeklarasikan A dan B, lalu
menggabungkan keduanya dengan sebuah operator matematika, lalu melihat dampaknya
secara langsung, semua dalam bentuk diagram/simbol.&lt;/p&gt;
&lt;p&gt;Flowchart, UML Diagram, adalah contoh dari model sebuah VPL, dimensinya
adalah spatial relationship lewat penunjuk panah, atau time-based impact
seperti perubahan data sebelum dan sesudah.&lt;/p&gt;
&lt;h2&gt;Tapi kan, saya pakai Microsoft Visual Basic/Netbeans, bisa drag &amp;amp; drop, itu visual!&lt;/h2&gt;
&lt;p&gt;Software yang dipakai untuk 'drag &amp;amp; drop' itu adalah development environment,
nggak boleh disamakan dengan bahasa pemrogramannya, development environment
adalah software yang ngasih kita shortcut untuk melakukan task-task yang
umum seperti manage project, bikin GUI (Form/Tombol/Textbox/dll), bikin
build, dll, tapi dibelakang layar mereka ngehasilin kode yang kurang lebih
sama dengan kalau kita ngetik di teks editor biasa. Tampilan GUI yang dibuat
di software ini juga di simpan ke file teks manifest biasa.&lt;/p&gt;
&lt;p&gt;Ini yang namanya VPE (Visual Programming Environment), bahasa pemrograman
seperti Visual Basic dan Java punya Microsoft Visual Studio dan Netbeans
sebagai VPEnya, namun nggak diwajibkan harus pakai karena sifat textual
programming languagenya yang dengan semantik terbatas bisa dimanage
sebagai teks biasa dan bisa di compile terpisah.&lt;/p&gt;
&lt;p&gt;Sedangkan VPE untuk untuk Visual Programming Language (VPL) lebih bersifat
sebagai sebuah keharusan karna VPL sendiri sangat ekspresif dan sulit
untuk bekerja dengan VPL (dengan simbol dan sebagainya) tanpa menggunakan
software yang mensupport untuk membuat visually expressive syntax.&lt;/p&gt;
&lt;h2&gt;Tadi katanya Textual Programming itu berbentuk teks dan VPL berbentuk simbol, Jadi maksudnya VPL itu nggak boleh ada teks sama sekali?&lt;/h2&gt;
&lt;p&gt;Ini yang paling sering disalah artikan, TP dan VP itu yang membedakan adalah
semantik, bukan tentang teks atau tidak, VPL juga punya teks di beberapa
bagian sampai batas tertentu.&lt;/p&gt;
&lt;p&gt;Lalu kenapa ada VPL? Salah satu main goalnya adalah untuk nge-improve
language design yang sekarang konvensional seperti textual programming
language, masalah dengan textual programming language adalah sifatnya
yang restriktif sekali, nggak banyak ekspresi yang bisa kita lakukan
karena dibatasi oleh struktur sintaks &amp;amp; parse tree bahasa pemrograman
yang bersangkutan, sementara VPL punya lebih sedikit aturan, sehingga
result yang dihasilkan bisa bermacam-macam karena objek dan spatial
relationshipnya yang nggak terlalu restriktif.&lt;/p&gt;
&lt;h2&gt;Lalu apa efek negatifnya belajar Pemrograman Visual dengan materi yang salah?&lt;/h2&gt;
&lt;p&gt;Banyak sekali, ibaratkan dengan ikut les bahasa Korea tapi yang diajarkan
adalah bahasa Jepang. VPL kebanyakan bukanlah general-purpose-language,
sedangkan yang diajarkan (contoh:Java), adalah general-purpose-language,
VPL lebih domain spesifik seperti untuk edukasi, hardware, dan multimedia
seperti audio analyzer atau animation. Sedangkan bahasa seperti Java
punya fungsi/domain yang luas sekali. Ditambah lagi biasanya materi yang
diajarkan adalah tentang "Visual" yang salah, yaitu gimana cara membuat
program berbasis GUI, gimana caranya supaya waktu tombol A ditekan, keluar
gambar kucing lagi pakai topi semangka, dll. Ini bukan visual programming,
mempelajari membuat program berbasis GUI nggak akan ngajarin kita tentang
visual programming, dan bisa jadi tersesat lebih jauh, contoh: mengesampingkan
materi yang lebih penting ketimbang belajar GUI, seperti programming language
paradigm.&lt;/p&gt;
&lt;p&gt;Post ini cuma mau menekankan perbedaan mendasar dari textual-programming
language, dan VPL. Nggak ada contoh/screenshot karena pengennya dibahas
singkat aja tentang karakteristik utama masing2 jenis programming languagenya.&lt;/p&gt;
&lt;p&gt;Untuk paper yang ngebahas tentang VPL cukup lengkap, ada disini:
http://www.cs.auckland.ac.nz/courses/compsci732s1c/archive/2005/lectures/WhatIsVP.pdf&lt;/p&gt;</summary></entry><entry><title>Samarinda ada di posisi 6 worldwide-Julython 2012</title><link href="http://kecebongsoft.com/2012/07/samarinda-ada-di-posisi-6-worldwide-julython-2012.html" rel="alternate"></link><updated>2012-07-30T00:00:00+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:kecebongsoft.com,2012-07-30:2012/07/samarinda-ada-di-posisi-6-worldwide-julython-2012.html</id><summary type="html">&lt;p&gt;Yup, saya ikutan Julython 2012, Julython adalah event sebulan penuh tentang
proyek open source berbasis python yang kita tulis sendiri, yang bikin
seneng adalah "Samarinda, Indonesia" ada di ranking ke 6 di page locations 
dari seluruh dunia (http://julython.org/location/), dan saya sekarang ada di 
posisi pertama di people page (http://julython.org/people/) :D,  Julython 2012 
akan berakhir beberapa hari lagi dan semoga posisi ini nggak turun :D.&lt;/p&gt;</summary></entry><entry><title>Extracting a subset of tar archive to a specific directory</title><link href="http://kecebongsoft.com/2012/07/extracting-a-subset-of-tar-archive-to-a-specific-directory.html" rel="alternate"></link><updated>2012-07-20T00:00:00+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:kecebongsoft.com,2012-07-20:2012/07/extracting-a-subset-of-tar-archive-to-a-specific-directory.html</id><summary type="html">&lt;p&gt;I came across a task where I need to automatically download solr
package and extract the files in example/ directory to a specific 
folder so here's how it's done:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir -p /dest/path/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar -xf file.tar &lt;span class="nb"&gt;source&lt;/span&gt;/path --strip&lt;span class="o"&gt;=&lt;/span&gt;n
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create a directory and extract a folder &lt;em&gt;source/path&lt;/em&gt; in the
file.tar. Notice that there's a &lt;em&gt;--strip=n--&lt;/em&gt;, this will let you 
skip the directory structure up to certain level from the root. So if I
want to extract the whole content of &lt;em&gt;source/path&lt;/em&gt; to &lt;em&gt;dest/path&lt;/em&gt; 
without recreating &lt;em&gt;source/path&lt;/em&gt; folder inside &lt;em&gt;dest/path&lt;/em&gt;, I can put
&lt;em&gt;--strip=2&lt;/em&gt; to the argument to skip directory &lt;em&gt;source/&lt;/em&gt; and 
&lt;em&gt;source/path&lt;/em&gt;&lt;/p&gt;</summary></entry><entry><title>.dotfiles</title><link href="http://kecebongsoft.com/2012/05/dotfiles.html" rel="alternate"></link><updated>2012-05-10T00:00:00+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:kecebongsoft.com,2012-05-10:2012/05/dotfiles.html</id><summary type="html">&lt;p&gt;I once maintain my own vimfiles repository, but vim plugins are now easier to manage using vundle and I realize it's time to only rely on my .vimrc without anything else (not .vim, not plugins, etc). So I created a &lt;a href="https://github.com/kecebongsoft/dotfiles"&gt;new repository&lt;/a&gt; and put all my dotfiles there, add some submodules and setup script to make it easy, oh, and I removed my vimfiles as well.&lt;/p&gt;</summary></entry></feed>