<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dedi Purwanto</title><link href="/" rel="alternate"></link><link href="/feeds/posts.atom.xml" rel="self"></link><id>/</id><updated>2012-11-11T20:51:27+01:00</updated><entry><title>Optimizing I/O cost with provisioned IOPS</title><link href="/2012/11/optimizing-io-cost-with-provisioned-iops.html" rel="alternate"></link><updated>2012-11-11T20:51:27+01:00</updated><author><name>Dedi Purwanto</name></author><id>tag:,2012-11-11:2012/11/optimizing-io-cost-with-provisioned-iops.html</id><summary type="html">&lt;p&gt;Recently I've been watching my monthly AWS bill and notice the I/O cost has been increased in the last few months. Note that at this point I've been receiving something around 220 million I/O request on my EBS volume. Earlier this week, Amazon Singapore did an introductory workshop nearby our office and introduces provisioned IOPS. I didn't really paid any attention to it, but it turned out really handy.&lt;/p&gt;
&lt;p&gt;IOPS, or IO per second, is a term coined by AWS to allow some resource in EBS volume in order to serve I/O requests, the more you have it, the more you can serve a request in a second. In AWS, there are two flavors of EBS, standard or provisioned, from the latter you will be able to set how many IOPS you want to have in a month, which is called as IOPS-month. 1 IOPS-month is equal to the number of seconds in a month, which is approximately 27 million second, or 27 million IOPS. When looking at my monthly I/O requests, which was 220 million, I can safely provision my IOPS to 100 IOPS which is something around 270 million IOPS per month, a bit higher and also safer in case of sudden peak.&lt;/p&gt;
&lt;p&gt;When using a standard I/O request, you will be charged something around 11 cents per 1 million request, and when using provisioned IOPS, you will be charged 11 cents per 1 IOPS-month, this will approximately save $10 a month for I/O requests. Pricing will depends on region, and provisioned storage will cost more for space, but the end cost is cheaper.&lt;/p&gt;
&lt;p&gt;So far, the only way to use this provisioned IOPS is by creating a new instance / launching new EBS volume, I haven't figured any way to switch my EBS volume to use a provisioned IOPS. For more info, see the EBS detail page in AWS (http://aws.amazon.com/ebs/).&lt;/p&gt;</summary><category term="AWS"></category></entry><entry><title>T-shirt New Relic</title><link href="/2012/09/t-shirt-new-relic.html" rel="alternate"></link><updated>2012-09-08T17:34:24+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:,2012-09-08:2012/09/t-shirt-new-relic.html</id><summary type="html">&lt;p&gt;4 Minggu yang lalu New Relic ada promosi bagi setiap user baru yang ngedeploy, bakal dapet t-shirt "Data Nerd" gratis, syaratnya, harus register via Geekli.st. Karna saya udah punya account New Relic sebelum ini, jadi harus register account terpisah buat ngedapetin t-shirt nya, maruk yah :p. Anyway t-shirtnya udah datang:&lt;/p&gt;
&lt;p&gt;&lt;img src='/images/newrelic1.jpg' /&gt;
&lt;img src='/images/newrelic2.jpg' /&gt;
&lt;img src='/images/newrelic3.jpg' /&gt;
&lt;img src='/images/newrelic4.jpg' /&gt;
&lt;img src='/images/newrelic5.jpg' /&gt;&lt;/p&gt;</summary></entry><entry><title>Samarinda ada di posisi 6 worldwide-Julython 2012</title><link href="/2012/07/samarinda-ada-di-posisi-6-worldwide-julython-2012.html" rel="alternate"></link><updated>2012-07-28T17:11:10+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:,2012-07-28:2012/07/samarinda-ada-di-posisi-6-worldwide-julython-2012.html</id><summary type="html">&lt;p&gt;Yup, saya ikutan Julython 2012, Julython adalah event sebulan penuh tentang
proyek open source berbasis python yang kita tulis sendiri, yang bikin
seneng adalah "Samarinda, Indonesia" ada di ranking ke 6 di page locations 
dari seluruh dunia (http://julython.org/location/), dan saya sekarang ada di 
posisi pertama di people page (http://julython.org/people/) :D,  Julython 2012 
akan berakhir beberapa hari lagi dan semoga posisi ini nggak turun :D.&lt;/p&gt;</summary></entry><entry><title>Pemrograman Visual</title><link href="/2012/07/pemrograman-visual.html" rel="alternate"></link><updated>2012-07-28T16:58:16+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:,2012-07-28:2012/07/pemrograman-visual.html</id><summary type="html">&lt;p&gt;Beberapa bulan lalu saya sering cerita via chat ama temen tentang tugas
kuliahnya di kampus *tiiiit*, beberapa kali dia mention  tentang tugas
mata kuliah Pemrograman Visual, setelah saya intip, cukup kaget karena
materinya tidak sesuai dengan judul mata kuliahnya. Kalau kalian lagi
ambil mata kuliah Pemrograman Visual dan diajarin VB atau Java, selamat,
kalian tersesat.&lt;/p&gt;
&lt;p&gt;Belakangan ini saya mulai terusik lagi dengan judul mata kuliah Pemrograman Visual. 
Sekarang saya pengen bahasa singkat aja (karna kalau diulas semua sumpah panjang 
banget) tentang salahnya dimana dan apa yang membedakan antara 
Pemrograman Visual dan yang bukan.&lt;/p&gt;
&lt;p&gt;Permasalahan utamanya adalah: Mata kuliah dengan judul Pemrograman 
Visual, tapi dengan materi bahasa pemrograman seperti Visual Basic dan
Java, digabungkan dengan software seperti Microsoft Visual Studio,
Eclipse dan NetBeans.&lt;/p&gt;
&lt;h2&gt;Bahasa-bahasa tersebut bukanlah bahasa pemrograman visual&lt;/h2&gt;
&lt;p&gt;Dalam desain bahasa pemrograman, ada satu bagian tentang studi semantik,
yaitu proses penterjemahan sebuah valid statement dari bahasa pemrograman 
menjadi sebuah computational model, ini terdiri dari banyak sekali parameter, 
salah satunya adalah struktur sintatik, dan dimensi. &lt;/p&gt;
&lt;p&gt;Jumlah dimensi inilah yang menentukan bahwa bahasa-bahasa seperti VB dan
teman-temannya adalah bukan bahasa pemrograman visual, melainkan &lt;em&gt;textual
programming language&lt;/em&gt;. Apa saja dimensi textual programming language?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dimensi horizontal, adalah semantic sebagai legal linear string, yang
  membentuk sebuah statement menjadi computational model&lt;/li&gt;
&lt;li&gt;Dimensi vertikal, adalah line continuation, baris ke 2 di kode
  biasanya diartikan sebagai baris selanjutnya setelah baris pertama, atau
  jalankan baris kedua setelah baris pertama&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dimensi vertikal meskipun salah satu bagian utama, tapi bukan bagian dari
semantik melainkan spatial relationship, atau flow/blok selanjutnya setelah
blok pertama (baris pertama).&lt;/p&gt;
&lt;h2&gt;Apa itu Pemrograman Visual?&lt;/h2&gt;
&lt;p&gt;VPL adalah bahasa pemrograman yang menggunakan banyak dimensi yang
visually expresive sebagai semantiknya. Expresi Visual bukan berarti
tombol-tombol di Microsoft Visual Basic untuk bikin textbox atau picture
box, tapi simbol-simbol yang menjelaskan tentang alur program, hubungan
antar entity, dan impact.&lt;/p&gt;
&lt;p&gt;Didalam VPL, saya bisa secara visual mendeklarasikan A dan B, lalu
menggabungkan keduanya dengan sebuah operator matematika, lalu melihat dampaknya
secara langsung, semua dalam bentuk diagram/simbol.&lt;/p&gt;
&lt;p&gt;Flowchart, UML Diagram, adalah contoh dari model sebuah VPL, dimensinya
adalah spatial relationship lewat penunjuk panah, atau time-based impact
seperti perubahan data sebelum dan sesudah.&lt;/p&gt;
&lt;h2&gt;Tapi kan, saya pakai Microsoft Visual Basic/Netbeans, bisa drag &amp;amp; drop, itu visual!&lt;/h2&gt;
&lt;p&gt;Software yang dipakai untuk 'drag &amp;amp; drop' itu adalah development environment,
nggak boleh disamakan dengan bahasa pemrogramannya, development environment
adalah software yang ngasih kita shortcut untuk melakukan task-task yang
umum seperti manage project, bikin GUI (Form/Tombol/Textbox/dll), bikin
build, dll, tapi dibelakang layar mereka ngehasilin kode yang kurang lebih
sama dengan kalau kita ngetik di teks editor biasa. Tampilan GUI yang dibuat
di software ini juga di simpan ke file teks manifest biasa.&lt;/p&gt;
&lt;p&gt;Ini yang namanya VPE (Visual Programming Environment), bahasa pemrograman
seperti Visual Basic dan Java punya Microsoft Visual Studio dan Netbeans
sebagai VPEnya, namun nggak diwajibkan harus pakai karena sifat textual
programming languagenya yang dengan semantik terbatas bisa dimanage
sebagai teks biasa dan bisa di compile terpisah.&lt;/p&gt;
&lt;p&gt;Sedangkan VPE untuk untuk Visual Programming Language (VPL) lebih bersifat
sebagai sebuah keharusan karna VPL sendiri sangat ekspresif dan sulit
untuk bekerja dengan VPL (dengan simbol dan sebagainya) tanpa menggunakan
software yang mensupport untuk membuat visually expressive syntax.&lt;/p&gt;
&lt;h2&gt;Tadi katanya Textual Programming itu berbentuk teks dan VPL berbentuk simbol, Jadi maksudnya VPL itu nggak boleh ada teks sama sekali?&lt;/h2&gt;
&lt;p&gt;Ini yang paling sering disalah artikan, TP dan VP itu yang membedakan adalah
semantik, bukan tentang teks atau tidak, VPL juga punya teks di beberapa
bagian sampai batas tertentu.&lt;/p&gt;
&lt;p&gt;Lalu kenapa ada VPL? Salah satu main goalnya adalah untuk nge-improve
language design yang sekarang konvensional seperti textual programming
language, masalah dengan textual programming language adalah sifatnya
yang restriktif sekali, nggak banyak ekspresi yang bisa kita lakukan
karena dibatasi oleh struktur sintaks &amp;amp; parse tree bahasa pemrograman
yang bersangkutan, sementara VPL punya lebih sedikit aturan, sehingga
result yang dihasilkan bisa bermacam-macam karena objek dan spatial
relationshipnya yang nggak terlalu restriktif.&lt;/p&gt;
&lt;h2&gt;Lalu apa efek negatifnya belajar Pemrograman Visual dengan materi yang salah?&lt;/h2&gt;
&lt;p&gt;Banyak sekali, ibaratkan dengan ikut les bahasa Korea tapi yang diajarkan
adalah bahasa Jepang. VPL kebanyakan bukanlah general-purpose-language,
sedangkan yang diajarkan (contoh:Java), adalah general-purpose-language,
VPL lebih domain spesifik seperti untuk edukasi, hardware, dan multimedia
seperti audio analyzer atau animation. Sedangkan bahasa seperti Java
punya fungsi/domain yang luas sekali. Ditambah lagi biasanya materi yang
diajarkan adalah tentang "Visual" yang salah, yaitu gimana cara membuat
program berbasis GUI, gimana caranya supaya waktu tombol A ditekan, keluar
gambar kucing lagi pakai topi semangka, dll. Ini bukan visual programming,
mempelajari membuat program berbasis GUI nggak akan ngajarin kita tentang
visual programming, dan bisa jadi tersesat lebih jauh, contoh: mengesampingkan
materi yang lebih penting ketimbang belajar GUI, seperti programming language
paradigm.&lt;/p&gt;
&lt;p&gt;Post ini cuma mau menekankan perbedaan mendasar dari textual-programming
language, dan VPL. Nggak ada contoh/screenshot karena pengennya dibahas
singkat aja tentang karakteristik utama masing2 jenis programming languagenya.&lt;/p&gt;
&lt;p&gt;Untuk paper yang ngebahas tentang VPL cukup lengkap, ada disini:
http://www.cs.auckland.ac.nz/courses/compsci732s1c/archive/2005/lectures/WhatIsVP.pdf&lt;/p&gt;</summary></entry><entry><title>owler.io Repository</title><link href="/2012/07/owlerio-repository.html" rel="alternate"></link><updated>2012-07-08T22:15:46+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:,2012-07-08:2012/07/owlerio-repository.html</id><summary type="html">&lt;p&gt;Longer that I thought it should be, and as easy as I think it would be,
owler.io is now on 
&lt;a href='http://github.com/kecebongsoft/owler.io'&gt;github&lt;/a&gt;.  It's an 
empty planet for now but I'll try to be consistent sending seeds in 
there, so stay tuned!&lt;/p&gt;</summary><category term="owler.io"></category></entry><entry><title>Extracting a subset of tar archive to a specific directory</title><link href="/2012/06/extracting-a-subset-of-tar-archive-to-a-specific-directory.html" rel="alternate"></link><updated>2012-06-28T20:46:43+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:,2012-06-28:2012/06/extracting-a-subset-of-tar-archive-to-a-specific-directory.html</id><summary type="html">&lt;p&gt;I came across a task where I need to automatically download solr
package and extract the files in example/ directory to a specific 
folder so here's how it's done:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir -p /dest/path/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar -xf file.tar &lt;span class="nb"&gt;source&lt;/span&gt;/path --strip&lt;span class="o"&gt;=&lt;/span&gt;n
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create a directory and extract a folder &lt;em&gt;source/path&lt;/em&gt; in the
file.tar. Notice that there's a &lt;em&gt;--strip=n--&lt;/em&gt;, this will let you 
skip the directory structure up to certain level from the root. So if I
want to extract the whole content of &lt;em&gt;source/path&lt;/em&gt; to &lt;em&gt;dest/path&lt;/em&gt; 
without recreating &lt;em&gt;source/path&lt;/em&gt; folder inside &lt;em&gt;dest/path&lt;/em&gt;, I can put
&lt;em&gt;--strip=2&lt;/em&gt; to the argument to skip directory &lt;em&gt;source/&lt;/em&gt; and 
&lt;em&gt;source/path&lt;/em&gt;&lt;/p&gt;</summary></entry><entry><title>owler.io inbox</title><link href="/2012/06/owlerio-inbox.html" rel="alternate"></link><updated>2012-06-28T20:46:43+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:,2012-06-28:2012/06/owlerio-inbox.html</id><summary type="html">&lt;p&gt;I launched owler.io a day before PyCon Apac 2012 has started, it was all
a rush. I'm trying my best to make it work before the conference started
for one single reason: show it at the lighting talk.&lt;/p&gt;
&lt;p&gt;You can probably guess how this could affect the internal system: some
hacks, unstructured stuff that is painful to see. But not only that,
also there are untested stuff that make me ashamed of my self. Owler.io
was kind of a suprise project, there were no planning, the idea just
came across and I just sort of did it, no long-term vision and all. This
makes the codebase has no solid grounds, it was all came from guessing.
I have quite experiences in the web side, but on the email service side,
almost zero. I came across Kenneth's inbox.py and just blindly implements
everything in my head.&lt;/p&gt;
&lt;p&gt;But having things working, although messy, thaught me a lot of things,
especially what the system really need, and how it should handle things.&lt;/p&gt;
&lt;p&gt;Since I'm planning to make this thing open to everyone, I think it's okay
if I put whatever's in my head about how things should work in here as
well.&lt;/p&gt;
&lt;p&gt;In case if some of you don't know, owler.io is simple a service that 
let's you create bitbucket or github issue by sending email to 
*[your_repository_name]@owler.io. It's that simple. There are two main
things in owler.io: A web interface that let's you register and manage
your repository and other information, and an inbox daemon that listen
to all incoming mails and process them accordingly.&lt;/p&gt;
&lt;p&gt;As I stated before, the web interface isn't the trickiest since it all
just a simple data management and I had quite an experience with Django.
The email service, in the other hand, was quite new and although it
was simple to implement the starting grid of it, most of the feature
and safety rules aren't there. Things went fine at the launch day,
until few weeks later when I create some use from my gmail, the email
service received multiple same email and it created multiple same issues
in the repository, and it was my company's repository!.&lt;/p&gt;
&lt;p&gt;I started to realize that this thing could go even worse, for example,
there are no email spoofing handling, and that itself was quite a
complex issue to tackle, there are exact way to prevent this from 
happening. Lucky this bug occured to me before anybody else get it. I
realize that I need to shut it down temporarely and make it significantly
more secure while still make it convenient to use.&lt;/p&gt;
&lt;p&gt;There are things in my mind on how to tackle this two problem. Avoiding
multiple creation on the same issue might be solved by creating a 
signature or a checksum on each incoming email. The other problem,
which is email spoofing, cannot be solved easily. The most possible way
to make sure no hacker can create issue by spoofing email address is
by sending a confirmation link to the sender, and ask them to click
the link to confirm and create the issue. &lt;/p&gt;
&lt;p&gt;This will affect the user experience of using the service, and it will
also rise a problem of spamming the original sender. But I realize that
this is the most possible way to implement because it's dead simple,
it's safer, and trying to be write my own handler to prevent spoofing
might not be unpleasant to anyone.&lt;/p&gt;</summary><category term="owler.io"></category></entry><entry><title>puppet-sentry</title><link href="/2012/06/puppet-sentry.html" rel="alternate"></link><updated>2012-06-28T20:46:43+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:,2012-06-28:2012/06/puppet-sentry.html</id><summary type="html">&lt;p&gt;When I'm tasked to cast a new installation of sentry with puppet, I was
faced with problem that sentry need to interactively ask a superuser
creation when &lt;em&gt;syncdb&lt;/em&gt; is performed, which came from Django's. Fortunately.
in Django you can have initial predefined data that will be imported
when &lt;em&gt;syncdb&lt;/em&gt; is performed. By having a json formatted file in the root
project path and passing &lt;em&gt;--no-input&lt;/em&gt; in the command, Django will 
import the data and find the superuser information in the file.&lt;/p&gt;
&lt;p&gt;To make it easier for people, I created a puppet module to install 
sentry without having to interactively enter superuser information. 
Check it here: &lt;a href='http://github.com/kecebongsoft/puppet-sentry'&gt;
kecebongsoft/puppet-sentry&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>72Solarized Theme</title><link href="/2012/06/72solarized-theme.html" rel="alternate"></link><updated>2012-06-24T22:22:03+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:,2012-06-24:2012/06/72solarized-theme.html</id><summary type="html">&lt;p&gt;For the past few hours I've been trying to modify the default &lt;em&gt;notmyidea&lt;/em&gt;
theme that came from pelican to be more look alike my 
&lt;a href='http://kecebongsoft.tumblr.com'&gt;Tumblr blog&lt;/a&gt;. Why? Because
I love solarized, and simplicity.&lt;/p&gt;
&lt;p&gt;Why 72? I am planning to make this blog to use fixed with font with 72 
columns. Which will make it extremelly easy to read, and suits my &lt;em&gt;brief&lt;/em&gt;
blogging style.&lt;/p&gt;
&lt;p&gt;It turned out it wasn't that easy, especially I am a complete idiot in
web design. So this is all that was. I will try to improve as more posts
will be here. But at least it got the simplicity already.&lt;/p&gt;</summary></entry><entry><title>Reinstating owler.io</title><link href="/2012/06/reinstating-owlerio.html" rel="alternate"></link><updated>2012-06-24T00:00:00+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:,2012-06-24:2012/06/reinstating-owlerio.html</id><summary type="html">&lt;p&gt;You might notice that in the last couple of days, owler.io is not really
functioning. I've turned off the email daemon because I realized
it was too unsecure and it can lead to a big problem when somebody 
register and used it frequently.&lt;/p&gt;
&lt;p&gt;The problems were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Same email being received multiple times for no known reason&lt;/li&gt;
&lt;li&gt;There's no way to tell if the adress being spoofed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Considering this to big hole, and the fact that I was quite busy with
other stuff latety, I decided to deactivate the email daemon for the
time being and, most importantly, will try to rewrite most of the code
from sratch and publish it to github. I figured out that the second 
point is the most important one as it will allow people to see what's
inside the system, how it treat the their data, keep their privacy
and most importantly, let other contribute when there find any hole.&lt;/p&gt;
&lt;p&gt;In a couple days I will prepare what needs to be done and immediately
cast a new repository on github. So stay tuned.&lt;/p&gt;</summary><category term="owler.io"></category></entry><entry><title>.dotfiles</title><link href="/2012/06/dotfiles.html" rel="alternate"></link><updated>2012-06-12T19:02:04+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:,2012-06-12:2012/06/dotfiles.html</id><summary type="html">&lt;p&gt;I once maintain my own vimfiles repository, but vim plugins are now easier to manage using vundle and I realize it's time to only rely on my .vimrc without anything else (not .vim, not plugins, etc). So I created a &lt;a href="https://github.com/kecebongsoft/dotfiles"&gt;new repository&lt;/a&gt; and put all my dotfiles there, add some submodules and setup script to make it easy, oh, and I removed my vimfiles as well.&lt;/p&gt;</summary></entry><entry><title>First post</title><link href="/2012/06/first-post.html" rel="alternate"></link><updated>2012-06-11T20:31:08+02:00</updated><author><name>Dedi Purwanto</name></author><id>tag:,2012-06-11:2012/06/first-post.html</id><summary type="html">&lt;p&gt;this is my first post&lt;/p&gt;</summary></entry></feed>